"""
Mangrove-Health-Classification-with-Sentinel-2-and-ML (Synthetic Demo)
----------------------------------------------------------------------
Creates a synthetic Sentinel‑2 feature dataset (>100 samples), derives spectral
indices (NDVI, EVI, NDWI, MNDWI, NBR, red‑edge metrics), trains a ML classifier
(RandomForest), and exports artifacts (CSV, model, and plots).

Usage
-----
python mangrove_health_classification.py --n 1200 --seed 42

Artifacts
---------
./artifacts/
  ├─ mangrove_s2_synthetic.csv
  ├─ model_mangrove_health.joblib
  ├─ confusion_matrix.png
  ├─ roc_ovr.png
  └─ feature_importance.png

Requirements
------------
- numpy, pandas, scikit-learn, matplotlib, joblib
"""
from __future__ import annotations
import argparse
import os
import warnings
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from dataclasses import dataclass
from typing import Tuple, List

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import (
    accuracy_score,
    f1_score,
    classification_report,
    confusion_matrix,
    roc_auc_score,
    roc_curve,
)
from sklearn.preprocessing import label_binarize
import joblib

warnings.filterwarnings("ignore", category=UserWarning)

# ---------------------------- Synthetic data generation ---------------------------- #
@dataclass
class Config:
    n: int = 1200
    seed: int = 42


def _clip01(x):
    return np.clip(x, 0.0, 1.0)


def generate_synthetic_s2(cfg: Config) -> pd.DataFrame:
    """Generate synthetic Sentinel‑2 reflectance and contextual features.

    Bands roughly follow S2: B2(Blue), B3(Green), B4(Red), B5-7(RE), B8(NIR),
    B8A(NIR-narrow), B11(SWIR1), B12(SWIR2). Values in [0,1].
    """
    rng = np.random.default_rng(cfg.seed)
    n = cfg.n

    # Base latent factors
    canopy = rng.beta(5, 2, n)          # greenness/canopy vigor
    waterlog = rng.beta(2, 5, n)        # waterlogging/wetness
    salinity = rng.beta(2.5, 3.5, n)    # soil/water salinity proxy
    disturbance = rng.beta(2, 4, n)     # human/erosion disturbance

    # Context features
    dist_to_river_m = rng.gamma(2.0, 150.0, n)  # 0 - few km
    tide_level_m = rng.normal(0.5, 0.25, n)
    tide_level_m = np.clip(tide_level_m, 0.0, 1.5)

    # Construct band reflectances with stochastic structure
    # Greener canopy elevates NIR/RE, reduces Red; waterlog raises Green & lowers SWIR; salinity raises SWIR
    B2 = _clip01(0.05 + 0.08 * (1 - canopy) + 0.02 * waterlog + rng.normal(0, 0.01, n))
    B3 = _clip01(0.1 + 0.10 * waterlog + 0.02 * (1 - canopy) + rng.normal(0, 0.012, n))
    B4 = _clip01(0.06 + 0.18 * (1 - canopy) + 0.02 * disturbance + rng.normal(0, 0.012, n))

    RE_base = 0.2 + 0.35 * canopy - 0.05 * disturbance
    B5 = _clip01(RE_base + rng.normal(0, 0.015, n))
    B6 = _clip01(RE_base + 0.02 + rng.normal(0, 0.015, n))
    B7 = _clip01(RE_base + 0.04 + rng.normal(0, 0.015, n))

    NIR_base = 0.25 + 0.45 * canopy - 0.05 * disturbance
    B8 = _clip01(NIR_base + rng.normal(0, 0.02, n))
    B8A = _clip01(NIR_base - 0.02 + rng.normal(0, 0.02, n))

    SWIR1_base = 0.08 + 0.25 * salinity - 0.08 * waterlog
    SWIR2_base = 0.06 + 0.30 * salinity - 0.06 * waterlog
    B11 = _clip01(SWIR1_base + rng.normal(0, 0.02, n))
    B12 = _clip01(SWIR2_base + rng.normal(0, 0.02, n))

    # Spectral indices
    def safe_nd(a, b):
        return (a - b) / np.maximum(a + b, 1e-6)

    NDVI = safe_nd(B8, B4)
    EVI = 2.5 * (B8 - B4) / (B8 + 6 * B4 - 7.5 * B2 + 1e-6)
    NDWI = safe_nd(B3, B8)   # McFeeters (1996)
    MNDWI = safe_nd(B3, B11) # Xu (2006)
    NBR = safe_nd(B8, B12)

    # Red‑edge position proxy (simple difference between RE and Red)
    REIP = B6 - B4

    # Texture proxies (synthetic): local variance approximations
    tex_NIR = np.abs(rng.normal(0.0, 0.02, n)) + 0.03 * disturbance
    tex_RE = np.abs(rng.normal(0.0, 0.02, n)) + 0.02 * (1 - canopy)

    # Health score (latent) combining drivers
    health_score = (
        2.5 * NDVI + 0.6 * EVI - 0.4 * disturbance + 0.3 * NDWI
        - 0.3 * salinity + 0.2 * (1 - tex_NIR) + 0.15 * (REIP)
        - 0.15 * (dist_to_river_m / 2000.0)
        + 0.1 * (0.8 - B11)  # penalize high SWIR1 (dry/saline)
        + rng.normal(0, 0.2, n)
    )

    # Discretize into classes: 0=degraded, 1=stressed, 2=healthy
    q1, q2 = np.quantile(health_score, [0.35, 0.70])
    y = np.where(health_score < q1, 0, np.where(health_score < q2, 1, 2))

    df = pd.DataFrame({
        "B2": B2, "B3": B3, "B4": B4, "B5": B5, "B6": B6, "B7": B7,
        "B8": B8, "B8A": B8A, "B11": B11, "B12": B12,
        "NDVI": NDVI, "EVI": EVI, "NDWI": NDWI, "MNDWI": MNDWI, "NBR": NBR,
        "REIP": REIP, "tex_NIR": tex_NIR, "tex_RE": tex_RE,
        "dist_to_river_m": dist_to_river_m, "tide_level_m": tide_level_m,
        "label": y
    })

    return df

# ---------------------------- Training & evaluation ---------------------------- #

def train_evaluate(df: pd.DataFrame, seed: int = 42):
    feature_cols = [c for c in df.columns if c != "label"]
    X = df[feature_cols].values
    y = df["label"].values

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.25, random_state=seed, stratify=y
    )

    clf = RandomForestClassifier(
        n_estimators=500,
        max_depth=None,
        min_samples_leaf=2,
        n_jobs=-1,
        random_state=1337,
        class_weight="balanced_subsample",
    )

    clf.fit(X_train, y_train)

    y_pred = clf.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    f1m = f1_score(y_test, y_pred, average="macro")

    print("\n=== Mangrove Health Classification (Synthetic) ===")
    print(f"Samples: {len(df):,}  Classes: {np.unique(y).tolist()}")
    print(f"Accuracy: {acc:.3f}   F1-macro: {f1m:.3f}")
    print("\nClassification report:\n", classification_report(y_test, y_pred, digits=3))

    return clf, (X_test, y_test, y_pred), feature_cols

# ---------------------------- Plotting helpers ---------------------------- #

def plot_confusion(y_true, y_pred, out_path: str):
    cm = confusion_matrix(y_true, y_pred, labels=[0,1,2])
    fig, ax = plt.subplots(figsize=(5,4))
    im = ax.imshow(cm, interpolation='nearest')
    ax.set_title('Confusion Matrix (0=degraded,1=stressed,2=healthy)')
    ax.set_xlabel('Predicted')
    ax.set_ylabel('True')
    ax.set_xticks([0,1,2]); ax.set_yticks([0,1,2])
    for i in range(cm.shape[0]):
        for j in range(cm.shape[1]):
            ax.text(j, i, cm[i, j], ha='center', va='center')
    fig.tight_layout(); fig.savefig(out_path, dpi=160); plt.close(fig)


def plot_feature_importance(model: RandomForestClassifier, feature_names: List[str], out_path: str, top_k: int = 20):
    importances = model.feature_importances_
    idx = np.argsort(importances)[::-1][:top_k]
    fig, ax = plt.subplots(figsize=(8,6))
    ax.barh([feature_names[i] for i in idx][::-1], importances[idx][::-1])
    ax.set_xlabel('Gini Importance')
    ax.set_title('Top Feature Importances')
    fig.tight_layout(); fig.savefig(out_path, dpi=160); plt.close(fig)


def plot_roc_ovr(model: RandomForestClassifier, X_test: np.ndarray, y_test: np.ndarray, out_path: str):
    y_bin = label_binarize(y_test, classes=[0,1,2])
    y_prob = model.predict_proba(X_test)
    # One-vs-rest ROC (macro avg)
    fig, ax = plt.subplots(figsize=(6,5))
    aucs = []
    for i, cls in enumerate([0,1,2]):
        fpr, tpr, _ = roc_curve(y_bin[:, i], y_prob[:, i])
        auc = roc_auc_score(y_bin[:, i], y_prob[:, i])
        aucs.append(auc)
        ax.plot(fpr, tpr, label=f"Class {cls} AUC={auc:.2f}")
    ax.plot([0,1],[0,1], linestyle='--')
    ax.set_xlabel('FPR'); ax.set_ylabel('TPR'); ax.set_title('ROC (One-vs-Rest)')
    ax.legend()
    fig.tight_layout(); fig.savefig(out_path, dpi=160); plt.close(fig)

# ---------------------------- CLI ---------------------------- #

def main():
    ap = argparse.ArgumentParser(description='Synthetic Sentinel-2 + ML for Mangrove Health Classification')
    ap.add_argument('--n', type=int, default=1200, help='Number of samples (>100)')
    ap.add_argument('--seed', type=int, default=42, help='Random seed')
    args = ap.parse_args()

    if args.n < 101:
        raise SystemExit('Please use --n >= 101 (requirement: >100 points)')

    cfg = Config(n=args.n, seed=args.seed)
    df = generate_synthetic_s2(cfg)

    os.makedirs('artifacts', exist_ok=True)
    df.to_csv('artifacts/mangrove_s2_synthetic.csv', index=False)

    model, eval_pack, feature_cols = train_evaluate(df, seed=args.seed)
    X_test, y_test, y_pred = eval_pack

    # Save model
    joblib.dump(model, 'artifacts/model_mangrove_health.joblib')

    # Plots
    plot_confusion(y_test, y_pred, 'artifacts/confusion_matrix.png')
    plot_feature_importance(model, feature_cols, 'artifacts/feature_importance.png')
    plot_roc_ovr(model, X_test, y_test, 'artifacts/roc_ovr.png')

    print('\nArtifacts saved in ./artifacts')


if __name__ == '__main__':
    main()
